#pragma once

#include <xrn/Language/Token.hpp>

namespace xrn::language {

///////////////////////////////////////////////////////////////////////////
/// \brief Allows simple TokenPool manipulations
/// \ingroup language
///
/// \include TokenPool.hpp <xrn/Language/TokenPool.hpp>
///
/// Compiles xrn code into an executable
///
/// Usage example:
/// \code
/// \endcode
///
///////////////////////////////////////////////////////////////////////////
class TokenPool {

public:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // static elements
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Type internally contained by the container of the class
    ///
    ///////////////////////////////////////////////////////////////////////////
    using SubType = ::xrn::language::AToken;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Type internally contained by the class
    ///
    ///////////////////////////////////////////////////////////////////////////
    using Type = ::std::vector<::std::shared_ptr<TokenPool::SubType>>;



public:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Constructors
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    explicit TokenPool() noexcept;

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    explicit TokenPool(
        TokenPool::Type&& expression
    ) noexcept;




    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Container support
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Gets an iterator to the begining of the vector
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto begin()
        -> TokenPool::Type::iterator;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Gets an iterator to the begining of the vector
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto begin() const
        -> TokenPool::Type::const_iterator;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Gets an iterator to the begining of the vector
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto cbegin() const
        -> TokenPool::Type::const_iterator;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Gets an iterator to the end of the vector
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto end()
        -> TokenPool::Type::iterator;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Gets an iterator to the end of the vector
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto end() const
        -> TokenPool::Type::const_iterator;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Gets an iterator to the end of the vector
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto cend() const
        -> TokenPool::Type::const_iterator;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Get the size of the container
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto size() const
        -> ::std::size_t;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Get the value at an index
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto operator[](
        ::std::size_t i
    ) -> ::std::shared_ptr<TokenPool::SubType>&;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Add the argument to the container
    ///
    ///////////////////////////////////////////////////////////////////////////
    void add(
        auto&&... arg
    );

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Add the argument to the container
    ///
    ///////////////////////////////////////////////////////////////////////////
    template <
        typename T
    > void add(
        ::std::shared_ptr<T>&& arg
    );




private:

    TokenPool::Type m_expression;

};

} // namespace xrn::language

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Header-implementation
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
#include <xrn/Language/TokenPool.impl.hpp>
