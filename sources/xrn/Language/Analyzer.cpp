///////////////////////////////////////////////////////////////////////////
// Precompilled headers
///////////////////////////////////////////////////////////////////////////
#include <pch.hpp>

///////////////////////////////////////////////////////////////////////////
// Headers
///////////////////////////////////////////////////////////////////////////
#include <xrn/Language/Analyzer.hpp>



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Constructors
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
auto ::xrn::language::Analyzer::run(
    ::xrn::language::Program& program
) -> bool
{
    for (auto& expression : program.getExpressions()) {
        if (
            !Analyzer::processLiterals(expression) ||
            !Analyzer::processMathExpressions(expression)
        ) {
            return false;
        }
    }
    return true;
}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Syntactic analysis
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
auto ::xrn::language::Analyzer::processLiterals(
    ::xrn::language::Expression& expression
) -> bool
{
    for (auto& tokenPtr : expression) {
        if (tokenPtr->isType(::xrn::language::token::Type::INT_LITERAL)) {
            ::fmt::print("{}\n", tokenPtr->getValueAsString());
        } else if (tokenPtr->isType(::xrn::language::token::Type::FLOAT_LITERAL)) {
            ::fmt::print("{}\n", tokenPtr->getValueAsString());
        }
    }
    return true;
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::language::Analyzer::processMathExpressions(
    ::xrn::language::Expression& expression
) -> bool
{
    ::std::queue<::std::string> outputs;
    ::std::stack<::std::string> operators;
    for (auto& tokenPtr : expression) {
        if (tokenPtr->isNumber()) {
            outputs.push(tokenPtr->getValueAsString());
        } else if (tokenPtr->isType(::xrn::language::token::Type::OPERATOR)) {
            operators.push(tokenPtr->getValueAsString());
        }
    }
    return true;
}
