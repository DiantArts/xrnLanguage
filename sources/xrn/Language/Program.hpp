#pragma once

#include <xrn/Language/Detail/Syntax.hpp>
#include <xrn/Language/TokenPool.hpp>

namespace xrn::language {

///////////////////////////////////////////////////////////////////////////
/// \brief Allows simple Program manipulations
/// \ingroup language
///
/// \include Program.hpp <xrn/Language/Program.hpp>
///
/// Compiles xrn code into an executable
///
/// Usage example:
/// \code
/// \endcode
///
///////////////////////////////////////////////////////////////////////////
class Program {

    enum ErrorLevel {
        NOTE = 0,
        WARNING,
        ERROR
    };

public:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Constructors
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Constructs an Id from a value
    ///
    /// Constructs a ::xrn::util::Time containing a point in time.
    ///
    /// \param amount Time in milliseconds
    ///
    ///////////////////////////////////////////////////////////////////////////
    explicit Program(
        const ::std::string& file
    ) noexcept;



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Function
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto getFunctions() const
        -> const ::std::vector<::std::string>&;

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    void addFunction(
        ::std::string functionName
    );

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    void isFunction(
        ::std::string functionName
    );



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Getters/Setters
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    void addError(
        ::std::shared_ptr<::xrn::language::AToken> token,
        const ::std::string& message,
        const ::std::string& compilerHelp = ""
    );

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    void addWarning(
        ::std::shared_ptr<::xrn::language::AToken> token,
        const ::std::string& message,
        const ::std::string& compilerHelp = ""
    );

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    void addNote(
        ::std::shared_ptr<::xrn::language::AToken> token,
        const ::std::string& message,
        const ::std::string& compilerHelp = ""
    );

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto hasError() const
        -> bool;

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    void printError() const;

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    void proposeMaxCharacterNumber(
        ::std::size_t
    );



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Getters/Setters
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto getLines() const
        -> const ::std::vector<::std::string>&;

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto getTokens() const
        -> const ::xrn::language::TokenPool&;

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto getTokens()
        -> ::xrn::language::TokenPool&;

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    void setTokens(
        ::xrn::language::TokenPool&& expressions
    );



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Print
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    void printTokens() const;



private:

    ::std::string m_filepath;
    ::std::size_t m_maxCharacterNumber;
    ::std::vector<::std::string> m_lines;
    ::std::vector<::std::string> m_functions;
    ::std::vector<::std::string> m_variables;
    ::std::vector<::std::tuple<
        ::std::shared_ptr<::xrn::language::AToken>,
        ::std::string,
        Program::ErrorLevel,
        ::std::string
    >> m_error;
    ::xrn::language::TokenPool m_tokens;

};

} // namespace xrn::language
