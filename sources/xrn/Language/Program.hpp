#pragma once

#include <xrn/Language/Detail/Syntax.hpp>
#include <xrn/Language/Expression.hpp>

namespace xrn::language {

///////////////////////////////////////////////////////////////////////////
/// \brief Allows simple Program manipulations
/// \ingroup language
///
/// \include Program.hpp <xrn/Language/Program.hpp>
///
/// Compiles xrn code into an executable
///
/// Usage example:
/// \code
/// \endcode
///
///////////////////////////////////////////////////////////////////////////
class Program {

public:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Constructors
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Constructs an Id from a value
    ///
    /// Constructs a ::xrn::util::Time containing a point in time.
    ///
    /// \param amount Time in milliseconds
    ///
    ///////////////////////////////////////////////////////////////////////////
    explicit Program(
        const ::std::vector<::std::string>& file
    ) noexcept;



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Getters/Setters
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto getLines() const
        -> const ::std::vector<::std::string>&;

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto getExpressions() const
        -> const ::std::vector<::xrn::language::Expression>&;

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto getExpressions()
        -> ::std::vector<::xrn::language::Expression>&;

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    void setExpressions(
        ::std::vector<::xrn::language::Expression>&& expressions
    );



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Print
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    void printTokens() const;

private:

    ::std::vector<::std::string> m_lines;
    ::std::vector<::xrn::language::Expression> m_expressions;

};

} // namespace xrn::language
