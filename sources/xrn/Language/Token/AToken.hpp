#pragma once

namespace xrn::language::token {

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Types
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
/// \brief Type of token
///
///////////////////////////////////////////////////////////////////////////
enum Type {
    INVALID = 0,
    KEYWORD,
    OPERATOR,
    COMPARATOR,
    ACCESSOR,
    SEPARATOR,
    IDENTIFIER,
    BOOLEAN, // b
    STRING, // s, ""
    CHARACTER, // ''
    TYPE_SPECIFIER,
    SPECIAL_MEMBER_FUNCTION, // __*__
    LINE_COMMENT, // #
    MULTI_LINE_COMMENT, // #* *#

    INT_LITERAL,
    FLOAT_LITERAL,
    I8, // i8, bi
    I16, // i16, -
    I32, // i32, i
    I64, // I64
    F8, // f8, bf
    F16, // f16, -
    F32, // f32, f
    F64, // f64, d
    SIZE, // sz
};

///////////////////////////////////////////////////////////////////////////
/// \brief Type of token as string
///
///////////////////////////////////////////////////////////////////////////
static inline constexpr const ::std::string_view TypeStr[]{
    "invalid",
    "keyword",
    "operator",
    "comparator",
    "accessor",
    "separator",
    "identifier",
    "boolean",
    "string",
    "character",
    "type_specifier",
    "special_member_function",
    "line_comment",
    "multi_line_comment",
    "Int_litteral",
    "Float_litteral",
    "I8",
    "I16",
    "I32",
    "I64",
    "F8",
    "F16",
    "F32",
    "F64",
    "Size",
};

} // namespace xrn::language::token



namespace xrn::language {

///////////////////////////////////////////////////////////////////////////
/// \brief Allows simple AToken manipulations
/// \ingroup language
///
/// \include AToken.hpp <xrn/Language/AToken.hpp>
///
/// Compiles xrn code into an executable
///
/// Usage example:
/// \code
/// \endcode
///
///////////////////////////////////////////////////////////////////////////
class AToken {

public:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Constructors
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Constructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    AToken(
        ::xrn::language::token::Type type,
        ::std::size_t lineNumber,
        ::std::size_t characterNumber
    ) noexcept;



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Rule of 5
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Destructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual ~AToken() = 0;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Copy constructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    AToken(
        const AToken& other
    ) noexcept = delete;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Copy assign operator
    ///
    ///////////////////////////////////////////////////////////////////////////
    auto operator=(
        const AToken& other
    ) noexcept
        -> AToken& = delete;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Move constructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    AToken(
        AToken&& that
    ) noexcept;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Move assign operator
    ///
    ///////////////////////////////////////////////////////////////////////////
    auto operator=(
        AToken&& that
    ) noexcept
        -> AToken&;



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Virtual
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Get the token as string
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] virtual auto getValueAsString() const
        -> const ::std::string& = 0;



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Type comparator
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto isNumber() const
        -> bool;

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto isFunctionCall() const
        -> bool;

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto isType(
        ::xrn::language::token::Type comparativeType
    ) const
        -> bool;



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Getters
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto getType() const
        -> ::xrn::language::token::Type;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Formats the token information for string
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto getAsString() const
        -> ::std::string;



protected:

    ::xrn::language::token::Type m_type;
    ::std::size_t m_lineNumber;
    ::std::size_t m_characterNumber;

};

} // namespace xrn::language

::std::ostream& operator<<(
    ::std::ostream& os,
    const ::xrn::language::AToken& token
);
