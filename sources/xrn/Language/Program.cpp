///////////////////////////////////////////////////////////////////////////
// Precompilled headers
///////////////////////////////////////////////////////////////////////////
#include <pch.hpp>

///////////////////////////////////////////////////////////////////////////
// Headers
///////////////////////////////////////////////////////////////////////////
#include <xrn/Language/Program.hpp>



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Constructors
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
::xrn::language::Program::Program(
    const ::std::vector<::std::string>& linesRef
) noexcept
    : m_lines{ linesRef }
{}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Getters/Setters
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
[[ nodiscard ]] auto ::xrn::language::Program::getLines() const
    -> const ::std::vector<::std::string>&
{
    return m_lines;
}

///////////////////////////////////////////////////////////////////////////
[[ nodiscard ]] auto ::xrn::language::Program::getExpressions() const
    -> const ::std::vector<::xrn::language::Expression>&
{
    return m_expressions;
}

///////////////////////////////////////////////////////////////////////////
[[ nodiscard ]] auto ::xrn::language::Program::getExpressions()
    -> ::std::vector<::xrn::language::Expression>&
{
    return m_expressions;
}

///////////////////////////////////////////////////////////////////////////
void ::xrn::language::Program::setExpressions(
    ::std::vector<::xrn::language::Expression>&& expressions
)
{
    m_expressions = ::std::move(expressions);
}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Print
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
void ::xrn::language::Program::printTokens() const
{
    for (const auto& expression : m_expressions) {

        for (const auto& tokenPtr : expression) {
            if (tokenPtr) {
                ::fmt::print("{} ", tokenPtr->getAsString());
            } else {
                ::fmt::print("<INVALID> ");
            }
        }
        ::fmt::print("\n");
    }
}
